// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"app/api/handler"
	"app/api/middleware"
	"app/api/router"
	"app/cmd"
	"app/connect"
	"app/provider"
	"app/provider/user/repo"
	"github.com/google/wire"
	"github.com/urfave/cli"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func Initialize() cli.Commands {
	db := connect.NewUserDB()
	redis := connect.NewUserRedis()
	users := repo.NewUsers(db, redis)
	user := handler.NewUser(users, redis)
	handlerHandler := &handler.Handler{
		User: user,
	}
	accessLogger := connect.NewAccessLogger()
	accessLog := middleware.NewAccessLog(accessLogger)
	middlewareRecover := middleware.NewRecover()
	cors := middleware.NewCors()
	limiter := connect.NewRateLimiter()
	middlewareLimiter := middleware.NewLimiter(limiter)
	session := middleware.NewSession(redis)
	middlewareMiddleware := &middleware.Middleware{
		AccessLog: accessLog,
		Recover:   middlewareRecover,
		Cors:      cors,
		Limiter:   middlewareLimiter,
		Session:   session,
	}
	routerRouter := router.NewRouter(handlerHandler, middlewareMiddleware)
	httpCmd := cmd.NewHttp(routerRouter)
	commands := &cmd.Commands{
		HttpCmd: httpCmd,
	}
	cliCommands := cmd.NewCommands(commands)
	return cliCommands
}

// wire.go:

var providerSet = wire.NewSet(connect.ProviderSet, cmd.ProviderSet, router.ProviderSet, middleware.ProviderSet, handler.ProviderSet, provider.RepoSet)
